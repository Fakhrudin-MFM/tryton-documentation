Sequences
=========

Sequences are the mechanism that Tryton uses to provide unique numbers for
things like contacts, invoices, delivery notes, etc.  Each time a new number
is required then the next number in the sequence is generated and used.

Sequences are normally created and managed by an administrator using the
items inside the :tryton:menu:`ir.menu_sequences` menu.


Sequence Kinds
--------------

There are two different kinds of sequence in Tryton: **normal** and
**strict**.

**Normal** 
  These sequences are accessed via the :tryton:menu:`ir.menu_sequence_form`
  menu item and are used for the vast majority of documents that get created.

**Strict**
  This type of sequence can be found by opening the
  :tryton:menu:`ir.menu_sequence_strict_form` menu item.  These are used for
  documents that must always be numbered sequentially without any gaps
  whatsoever in-between the numbers.  This kind of sequence can be used where
  there is legislation that requires the numbers to be sequential, such as
  with invoice numbers in some countries.


Creating a New Sequence
-----------------------

To create a new sequence you need to have a view open for the kind of
sequence that you want to create.  If you need to, you can open the right
view by choosing the appropriate menu item for the kind of sequence you
require.

Once the sequence view is open you should click on the
:tryton:toolbar:`new` button on the toolbar.  When you do this the view may
change and you will be able to see and edit the different fields that make up
a sequence.

.. tryton:view:: ir.sequence_view_form /images/ir_sequence_form.png

    Screenshot of the sequence screen

Some of the general editable fields are:

:tryton:field:`~ir.sequence.code`
  This defines what the sequence will be used for.

:tryton:field:`~ir.sequence.prefix`
  Each sequence can have a prefix added to the start of the numbers that it
  generates, this could be some letters or numbers that identify what kind of
  document the sequence is for (e.g. ``S`` for sales, ``P`` for purchases,
  ...).
  It can also include the current year number, month or day (use ``%{year}``,
  ``%{month}`` and ``%{day}`` respectively for these).

:tryton:field:`~ir.sequence.suffix`
  In the same way that a sequence can have a prefix it can also have a suffix
  that gets added to the end of the number generated by it.

:tryton:field:`~ir.sequence.type`
  This is the method that should be used to generate the next number from the
  sequence.

:tryton:field:`~ir.sequence.padding`
  This field allows you to set how many digits the number should have.  If the
  generated number is not long enough then extra zeros are added to the start
  of the number to make it the correct length.

  .. tip::

      It is a good idea to set a relatively large
      :tryton:field:`~ir.sequence.padding` so that when viewing the sequences
      in a list they will sort properly.

      As sequences are considered to be *text* they are normally sorted in
      alphabetical order which leads to sequences with no padding being
      ordered, ``1, 10, 2, 222, 23, 3``, whereas the same numbers with a
      padding of 4 would be ordered as expected, ``0001, 0002, 0003, 0010,
      0023, 0222``.

For incremental sequences you can also change the:

:tryton:field:`~ir.sequence.number_increment`
  This is the number that gets added each time the sequence in incremented.
  You can use this to make the sequence go up in 2's ``(1, 3, 5, 7...)`` or
  3's ``(1, 4, 7, 10...)`` etc.

If the sequence is based on a timestamp then the generated number will be
based on the number of seconds since a point in time called the epoch.
Normally the epoch is defined to be Midnight on the 1st January 1970.

For timestamp sequences you can change the:

:tryton:field:`~ir.sequence.timestamp_offset`
  This number is taken away from the timestamp before the sequence number is
  generated, and is used to make the generated number smaller.  This is done
  because as you can imagine there have already been a lot of seconds since
  the epoch.

:tryton:field:`~ir.sequence.timestamp_rounding`
  The timestamp (once the offset has been removed) is divided by this number,
  which again is used to make the generated sequence number smaller.  Using a
  value of ``60`` will round the resulting timestamp to minutes, a value of
  ``3600`` ``(60 * 60)`` would round the timestamp to hours, and ``86400``
  ``(24 * 60 * 60)`` would round the timestamp to days.


.. include:: /common/global.rst
